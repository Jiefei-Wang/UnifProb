// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// performance_test1
NumericVector performance_test1(NumericVector& input);
RcppExport SEXP _UnifProb_performance_test1(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(performance_test1(input));
    return rcpp_result_gen;
END_RCPP
}
// performance_test2
NumericVector performance_test2(NumericVector& input);
RcppExport SEXP _UnifProb_performance_test2(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(performance_test2(input));
    return rcpp_result_gen;
END_RCPP
}
// performance_test3
NumericVector performance_test3(NumericVector& input);
RcppExport SEXP _UnifProb_performance_test3(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(performance_test3(input));
    return rcpp_result_gen;
END_RCPP
}
// performance_test4
void performance_test4(R_xlen_t n);
RcppExport SEXP _UnifProb_performance_test4(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< R_xlen_t >::type n(nSEXP);
    performance_test4(n);
    return R_NilValue;
END_RCPP
}
// compute_prob_fft
double compute_prob_fft(R_xlen_t m, NumericVector& gt, NumericVector& ht, NumericVector& diff_t, bool debug);
RcppExport SEXP _UnifProb_compute_prob_fft(SEXP mSEXP, SEXP gtSEXP, SEXP htSEXP, SEXP diff_tSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< R_xlen_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type gt(gtSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type ht(htSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type diff_t(diff_tSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_prob_fft(m, gt, ht, diff_t, debug));
    return rcpp_result_gen;
END_RCPP
}
// set_plan_flag
void set_plan_flag(Rcpp::String flag);
RcppExport SEXP _UnifProb_set_plan_flag(SEXP flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type flag(flagSEXP);
    set_plan_flag(flag);
    return R_NilValue;
END_RCPP
}
// set_fft_rounding
void set_fft_rounding(uint64_t x);
RcppExport SEXP _UnifProb_set_fft_rounding(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type x(xSEXP);
    set_fft_rounding(x);
    return R_NilValue;
END_RCPP
}
// set_fft_min_size
void set_fft_min_size(uint64_t x);
RcppExport SEXP _UnifProb_set_fft_min_size(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type x(xSEXP);
    set_fft_min_size(x);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_UnifProb_performance_test1", (DL_FUNC) &_UnifProb_performance_test1, 1},
    {"_UnifProb_performance_test2", (DL_FUNC) &_UnifProb_performance_test2, 1},
    {"_UnifProb_performance_test3", (DL_FUNC) &_UnifProb_performance_test3, 1},
    {"_UnifProb_performance_test4", (DL_FUNC) &_UnifProb_performance_test4, 1},
    {"_UnifProb_compute_prob_fft", (DL_FUNC) &_UnifProb_compute_prob_fft, 5},
    {"_UnifProb_set_plan_flag", (DL_FUNC) &_UnifProb_set_plan_flag, 1},
    {"_UnifProb_set_fft_rounding", (DL_FUNC) &_UnifProb_set_fft_rounding, 1},
    {"_UnifProb_set_fft_min_size", (DL_FUNC) &_UnifProb_set_fft_min_size, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_UnifProb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
